Source: https://launchschool.com/lessons/c53f2250/assignments/c633cf37

In analyzing a code snippet with precision, consider the following steps:
  - What type of action is being performed (method call, block, conditional, etc.)
  - What is the object that the action is being performed on?
  - Are there any side-effects of that action? (output? destructive action?)
  - What is the return value of that action?
  - Is the return value used by whatever instigated the action?

The above analysis steps can be laid out in a tabular format:
  Line | Action | Object | Side Effect | Return Value | Is Return Value Used?

Example 1:

  [[1, 2], [3, 4]].each do |arr|
    puts arr.first
  end
  # 1
  # 3
  # => [[1, 2], [3, 4]]

A:  We call #each on the nested array. Each object in the array (in this case, two
    arrays) is passed into a block that prints the first element in the array. It
    prints a string representation of the integer 1 from index 0 in the original
    array before returning nil (puts returns nil), and a string representation
    of the integer 3 from index 1 in the original array then puts returns nil,
    before returning the original, unmodified calling array.

Example 2:

  [[1, 2], [3, 4]].map do |arr|
    puts arr.first
  end
  # 1
  # 3
  # => [nil, nil]

A:  The map method is called on a nested array with two elements. Each element
    in the nested array is passed into the block passed into the map method. The
    element at index 0 in the nested array, a sub-array with 2 elements, causes
    the block to print '1' (line 4) but return nil, which is then appended to the
    resulting array. The element at index 1 in the nested array, also a sub-array
    with 2 elements, causes the block to print '3', but return nil, which is then
    appended to the resulting array. The map method returns a new array, consisting
    of the transformed elements: [nil, nil].

Example 3:

  [[1, 2], [3, 4]].map do |arr|
    puts arr.first
    arr.first
  end

A:  The map method is called on a nested array with 2 elements (sub-arrays). A
    given block is executed once for each element in the array: first printing a
    string representation of the integer '1' (at index 0 in the first subarray)
    and returning the value nil before returning the integer 1 (element at index
    0 of the subarray) as the block value and therefore the transformation for
    the #map method.
    Then the block is executed again: with line 2 printing a string representation
    of the integer '3' & returning nil, before causing the block to return as its
    value the integer 3 (element at index 0 in the second subarray), and passing
    that value as its transformation for the #map method.
    The given code block will print '1' and '3' before returning the result of
    the map call: the new array [1, 3].

Example 4:

  my_arr = [[18, 7], [3, 12]].each do |arr|
    arr.each do |num|
      if num > 5
        puts num
      end
    end
  end

A:  We initialize the variable 'my_arr' and set it to the result of calling the
    #each method (and a passed block) on the nested array [[18, 7], [3, 12]].
    For each array in the nested array, we call the #each method on its contents,
    printing the array element if it is greater than the integer 5. For the first
    element (sub-array), '18' is printed, then '7' is printed, before the inner
    #each call returns [18, 7], or the original calling sub-array. On the second
    execution of the block, using the sub-array [3, 12], the inner #each call
    prints '12', before returning [3, 12], or the original calling sub-array.
    The original #each call returns the original, unmodified, nested array:
    [[18, 7], [3, 12]].

Example 5:

  [[1, 2], [3, 4]].map do |arr|
    arr.map do |num|
      num * 2
    end
  end

A:  #Map is called on the nested, outer array. For each sub-array in the outer
    array, we call #map again, mutating each element into double its original
    value (since they are integers-- if they were strings, we would be changing
    them to 'doubled' with concatenation), and returning the modified array--
    in this case, [2, 4] for the first element in the outer array, and [6, 8] for
    the second. Because the block passes those values to the original #map
    method call, the code snippet will resolve to a new array: [[2, 4], [6, 8]].

Example 6:

  [{ a: 'ant', b: 'elephant' }, { c: 'cat' }].select do |hash|
    hash.all? do |key, value|
      value[0] == key.to_s
    end
  end
  # => [{ :c => "cat" }]

A:  The select method is called on an outer array containing two sub-hashes. #all?
    is called for each sub-hash, returning `true` if, for all key/value pairings
    in the given sub-hash, the character at index 0 for the hash value is equal
    to the hash key, converted from a symbol to its string representation. This
    returns false for the subhash at array index 0, because while 'a' ==
    'a', 'b' does not equal 'e' from elephant, and #all? returns `false` if any
    element causes the given block to resolve to not `true`. The element at
    array index 1 causes the #all? block to resolve to true, since 'c' == 'c',
    and because the corresponding values for the original array are [false, true],
    and select returns an array containing elements that cause the given block
    to return a true value, the code snippet returns [{ :c => "cat" }]

Example 9:

  [[[1], [2], [3], [4]], [['a'], ['b'], ['c']]].map do |element1|
    element1.each do |element2|
      element2.partition do |element3|
        element3.size > 0
      end
    end
  end
  # => [[[1], [2], [3], [4]], [["a"], ["b"], ["c"]]]

A:  #map is called by 3 level nested array. The block passed in to map consists
    of an #each invocation, which returns the original, unmodified array. The
    result of passing this into map is that the code snippet returns a new array
    object that has matching elements with the original caller.

Example 10:

  [[[1, 2], [3, 4]], [5, 6]].map do |arr|
    arr.map do |el|
      if el.to_s.size == 1    # it's an integer
        el + 1
      else                    # it's an array
        el.map do |n|
          n + 1
        end
      end
    end
  end

A:  The map method is called on an array with 3 levels. The second level has 2
    elements, which are passed to a block that calls #map again, accessing the
    third level of the array, which has 4 elements ([1, 2], [3, 4], 5, 6). That
    #map invocation uses a conditional if clause: if the element, converted to
    its string representation, has exactly one character, then it is an integer
    and #map should transform it into itself plus 1, otherwise #map is called
    again (on the elements 0 and 1: [1, 2] and [3, 4]) and each element in those
    corresponding sub-arrays is incremented by 1. The final return value will be:
    [[[2, 3], [4, 5]], [6, 7]]
