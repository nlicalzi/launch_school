Source: https://launchschool.com/lessons/263069da/assignments/6eba600c

Q1:
  Question:
    For this practice problem, write a one-line program that creates the following output 10 times, with the subsequent line indented 1 space to the right:
    Input: "The Flintstones rock!"

  Answer:
    My solution: (0..10).each { |x| puts (" " * x) + "The Flintstones Rock!"}
    LS Solution: 10.times { |number| puts (" " * number) + "The Flintstones Rock!" }

    Difference: Using a range object and each to accomplish the goal when 10.times would have sufficed. Pref. LS solution for concision.
Q2:
  Question:
    The result of the following statement will be an error: `puts "the value of 40 + 2 is " + (40 + 2)`
    Why is this and what are two possible ways to fix this?

  Answer:
    This will return a TypeError that states "no implicit conversion of Integer into String".

    Can be solved in the following ways:
      1. Use string interpolation: puts "the value of 40 + 2 is #{40 + 2}"
      2. Explicit typing: puts "the value of 40 + 2 is " + (40 + 2).to_s

Q3:
  My Answer:
    A simple guard clause an assure that the program won't run unless the numbers input is positive: insert line 1 `return nil unless number.positive?`

  LS Answer:
    Use a while condition for the loop (`while divisor > 0 do`) instead of begin/end/until

  Bonus 1:
    number % divisor there ensures that any number is actually a factor of number, otherwise the modulus operation would evaluate to non-zero remainder.

  Bonus 2:
    Line 8 is using a property of Ruby-- the last line is returned without needing to include `return` to return the factors array

Q4:
  Answer:
    There is a difference between `buffer << new_element` and `buffer = input_array + [new_element]`. They return the same value.
    Using the shovel operator (<<) mutates the input array, while using buffer = input_array + [new_element] reassigns buffer.

Q5:
  Answer:
    The issue is that the local variable `limit` is out of scope for the #fib method. We can fix the code by passing in `limit` as a parameter.
    Changes:
      line 3:   def fib(first_num, second_num, limit)
      line 12:  result = fib(0, 1, limit)

Q6:
  Answer:
    Assignment is non-mutating, so the code in #mess_with_it does not affect our local variable `answer`. Therefore 42 - 8 = 34.

Q7:
  Answer:
    Yes, the family's data was ransacked, because while assignment is non-mutating, hashes point to the object ids of variables in memory which are then altered.

Q8:
  Answer:
    The code returns "paper" out of the nested calls.

Q9:
  Answer:
    The code returns "no", because it passes in "yes" from foo, which is != "no"
