#! /usr/bin/env ruby
require "pg"
require "io/console"

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
  end

  def format_row(tuple)
    features = [ tuple["id"],
                 tuple["created_on"],
                 tuple["amount"].rjust(12),
                 tuple["memo"] ]
  
    puts features.join(" | ")
  end
  
  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC;")
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def add_expense(amount, memo)
    sql = "INSERT INTO expenses (amount, memo) VALUES ($1, $2);"
    @connection.exec_params(sql, [amount, memo]) 
  end

  def delete_expense(id)
    sql = "SELECT * FROM expenses WHERE id = $1"
    result = @connection.exec_params(sql, [id])

    if result.ntuples == 1
      sql = "DELETE FROM expenses WHERE id=$1"
      @connection.exec_params(sql, [id])

      puts "The following expense has been deleted:"
      display_expenses(result)
    else
      puts "There is no expense with the id '#{id}'."
    end
  end

  def search_expenses(term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @connection.exec_params(sql, ["%#{term}%"])
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses")
    puts "All expenses have been deleted."
  end

  private

  def display_count(expenses)
    count = expenses.ntuples
    if count == 0
      puts "There are no expenses."
    else
      puts "There #{ count == 1 ? "is" : "are"} #{count} expense#{"s" if count != 1}."
    end
  end

  def display_expenses(expenses)
    expenses.each do |tuple|
      format_row(tuple)
    end

    puts "-" * 45
    amount_sum = expenses.field_values("amount").map(&:to_f).reduce(:+)

    puts "Total #{amount_sum.to_s.rjust(24)}"
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(input_args)
    command, *args = input_args
  
    case command
    when "list"
      @application.list_expenses
    when "add"
      amount = args[0]
      memo   = args[1]
      abort "You must provide an amount and memo." unless amount && memo
    
      @application.add_expense(amount, memo)
    when "search"
      @application.search_expenses(args[0])
    when "delete"
      @application.delete_expense(args[0])
    when "clear"
      puts "This will remove all expenses. Are you sure? (y/n)"
      response = $stdin.getch
      @application.delete_all_expenses if response == "y"
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system
  
      Commands:
  
      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)