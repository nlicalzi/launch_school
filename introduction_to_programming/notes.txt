Introduction to Programming (Ruby) Notes

Instance vs. Class Methods
    - Class methods are called directly from the class, and shown in the official docs as ::(class_method)
        - e.g. new in String.new("blue")
    - Instance methods are applied to instances of the class, and shown in the official docs as #(instance_method)
        - e.g. split in "world wide web".split

Inheritance
    - All classes and subclasses come from a "parent", for something like String the parent is `Object`, whose methods are also available to strings
    - Some classes have other modules available to them, or "Included Modules"
        - Ex. String has `Comparable` available to it, so "cat".between?("ant", "zebra") resolves to True

Strings
    - Both single and double quotes create strings. Single quotes can be nested using \, ex. 'i heard him say \'ni\'!'
    - Double quotes allow for string interpolation, e.g. a = "ten", "My favorite number is #{a}!"
    - String concatenation can be performed with the + operator, e.g. 'foo' + 'foo' => "foofoo"
        - 'one' + 1 returns an error, because the types are different: "no implicit conversion of Integer into String"
        - strings can be converted to integers using this example method: '12'.to_i => 12 (int) [to_s method does string conversion]
            - This only works if the integer for conversion is at the beginning of the string, '4 hi' returns 4, but 'hi 4' returns 0

Symbols
    - Ruby symbols are created by placing a colon (:) before a word, are immutable, and cannot be printed (e.g. reference only)
        - ex. :name, :a_symbol, :"surprisingly, this is also a symbol"

Numbers/Math
    - Numbers can be represented as integers or floats
    - %, or modulo, returns the remainder of a division
    - Dividing two integers returns a rounded integer. Floats have to be included to get a float result
    - Equality comparison uses ==, and also works with strings
    - the methods .to_i and .to_f can be  used for converting objects to the integer and float datatypes

Nil
    - How Ruby expresses "nothing". ex. puts "Hello, World!" prints Hello, World! and returns "=> nil"
    - You can check if an object is nil type by using .nil? ex. "Hello, world".nil? returns "=> false"
    - In an expression, nil gets evaluated to false since it represents an absense of content, but false !== nil

Array
    - An ordered, comma separated list wrapped in square brackets
    - Elements are accessible by their index. ex. [1, 3, 5][1] => 3

Hash
    - Comparable to a dictionary, contains a set of key-value pairs wrapped in curly braces.

Vocab:
    - Domain-specific language (DSL): contrast w/ general-purpose language (like Ruby or Python) (ex. HTML, SQL, regex, Excel scripting)
    - Application Programming Interface (API): can either refer to programmatic web access (ex. Twitter API) or documentation (ex. Ruby Array API)
    - RubyGems / Gems: Collection of Ruby files or a Ruby library that performs a certain task. Can also refer to the publishing system for those libraries (gems).
        - New gems are said to be "cut" when a new version becomes available, public gems are available at http://rubygems.org, on Github, or elsewhere
        - Installation syntax: `gem install <gem name>`, but this is "single use". We'll learn more about `Gemfiles` soon!
    - Pry: Ruby library that acts as an irb alternative, good for debugging code
        - `require "pry"` at the beginning of a code snippet, using `binding.pry` later shows you a "paused" version of the program
            - A new pry session is opened and you can call your variables, play around with things, etc. to debug -> when done, do Ctrl + D to continue
    - Hash Rocket: "=>"
