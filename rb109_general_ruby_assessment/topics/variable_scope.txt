Notes by Topic on the LS Study Guide for RB109

# (Local) Variable Scope

## Notes
- Types of variables (constant, global, class, local)
  * Constant variables: global scope, (should be) immutable
    - Ex.: MY_CONSTANT = 'A constant variable'
  * Global variables: global scope, mutable (try not to use)
    - Ex.: $var = 'A global variable'
  * Class variables: accessible across the class/its instances, mutable
    - Ex.: @@class = 'A class variable'
  * Instance variables: local to the specific class instance, mutable
    - Ex.: @instance = 'A class instance variable'
  * Local variables: locally scoped, mutable
    - Ex.: local = 'A local variable (pass me to cross scope boundaries!)'

- Scoping Levels
  1. Inner scoped variables cannot be accessed by outer scope
  2. Outer scoped variables can be accessed (and re-assigned) by inner scope
    - When instantiating vars in inner scope, don't re-point existing vars
    - Descriptive variable names help avoid this issue (no single letters, etc.)
  3. Peer scopes do not conflict-- same level scopes have no access to each other
  4. Nested blocks follow same rules of inner/outer scoping (1st/2nd/3rd... levels)
  5. Be aware of variable shadowing
    - If a block takes a parameter, don't reuse a previous (outer) variable name
    - Variable shadowing prevents access/changes to the outer scoped variable

- Variables and Method Definitions
  1. A method definition can't access local variables in another scope
  2. A method definition can access objects passed in as arguments (or constants)

- Blocks within Method Definitions
  - Unchanged from before-- all scoping rules continue to apply

## Vocab:
- Variable Scope
- Scope Gates
- Inner Scope
- Outer Scope
- Peer Scopes
- Variable Shadowing
- Passing (objects) / Parameters / Arguments

## Questions for flashcards
- How do local variables interact with method invocations with blocks?
- How do local variables interact with method definitions?
