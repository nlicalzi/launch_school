###Lesson 2 Vocab (for flash cards)
Operator Precedence
  - What is Operator Precedence?
    - The set of rules Ruby follows to determine evaluation order of operations in an expression.
  - Reference: https://www.techotopia.com/index.php/Ruby_Operator_Precedence

Short Circuit Evaluation
  - What is short-circuit evaluation?
    -The semantics of boolean operators in a given programming language in which the second argument
    is evaluated only if the first argument does not suffice to determine the value of the expression.
    In effect, short-circuit operators can be called 'control structures', since they guide evaluation.

  - && and || will stop evaluating once they can guarantee return value
    - && short circuits with False as the left-hand value
      - ex. cook_dinner() or raise(RuntimeError, "Not in the mood.")

    - || short circuits with True as the "left-hand" value (like a reversed 'unless')
      - ex. raise(RuntimeError, "Not in the mood.") unless cook_dinner()

  - &&, aka Logical 'AND' has higher precedence than ||, aka Logical 'OR' (b/c of short circuiting)
  - ||, aka Logical 'OR' has lower precedence than &&, aka Logical 'AND' (b/c of short circuiting)


Implicit iteration (more idiomatic for Ruby than explicit [each vs. for loop])
  - How does iteration work in Ruby?
    Iterations in Ruby are done by passing callback closures (read: blocks) to container methods.

  - What iteration methods are commonly used in Ruby?
    Loops:
      loop (unconditional, uses break to exit)
      while
      until
      for
    Iterators:
      #each
      #collect
      #times
      #upto // downto
      #step
      #each_index
      #each_with_index
    Complex:
      #map
      #select
      #reject
      #partition
      #reduce
      #all?
      #any?

  - What is implicit iteration? Provide an example.
    - A way of iterating through the elements of a container object without using an explicit iterator object.
    Sometimes calld 'internal iteration' because the code fully executes within the context of the iterable
    object, and programmer only provides the operation to execute (using an anonymous function [lambda in Python]).

    iterable.each do |value|
      puts value
    end

    // OR //

    iterable.each { |value| puts value }

  - What is explicit iteration? Provide an example.
    - Explicit, or 'external', iteration uses 'element access' and 'element traversal' to iterate over an object.
      - Element access: referencing one particular element in the object collection.
      - Element traversal: modifying itself so it points to the next element.
    - Ex. Generators in Python; using a "loop counter"

  - Do we prefer implicit or explicit iteration as Rubyists? Why?
    - Implicit iteration is preferred in Ruby, relying heavily on the Enumerable module on Arrays and Hashes.
      It generally results in improved code clarity and consistency.

  - https://en.wikipedia.org/wiki/Iterator#Implicit_iterators

Assignment
  - Self assignment
      = : equal operator
      += : add AND; x += y equiv. x = x + y
      -= : subtract AND; x -= y equiv. x = x - y
      *= : multiply AND; x *= y equiv. x = x * y
      /= : divide AND; x /= y equiv. x = x / y
      %= : modulus AND; x %= y equiv. x = x % y
      **= : exponent AND; x **= y equiv. x = x**y

  - Multiple assignments
      var1, var2, var3 = 10, 20, 30

      myArray = %w(John Michel Fran Doug)
      var1, var2, var3, var4 = *myArray
        var1 => John, var2 => Michel, var3 => Fran, var4 => Doug

      names, school = myArray, 'St. Whatever'.
        names => ['John', 'Michel', 'Fran', 'Doug]
        school => 'St. Whatever'

  - Conditional assignment
      x ||= "default"
        value of x will be replaced with "default", but only if x is nil or false
      x &&= x.next_node
        x will be set to x.next_node, but only if x is NOT nil or false

  - https://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Operators#Assignment

What is the difference between Declarative and Imperative syntax?
  - "With imperative code, you're telling your program *how* to do something, and with declarative
  code, you're telling your program *what* you want to do." - Tyler Mcginnis, React Fundamentals

  - Imperative code focuses on the steps of implementation, or the how.
  - Declarative code uses a Ruby block to make a declaration/expression of the problem itself, or the what.
  - For more, read up on Higher Order Functions in Ruby.

  - Reading: http://queirozf.com/entries/functional-programming-with-ruby-procs-lambdas-closures-and-functions

Exceptions
  - What is an exception?
    - An exception is an object, from the Exception class, that is thrown to indicate something has gone wrong.

  - How can we deal with planned exceptions in our code?
    - Use an exception handler: a block of code that is only executed if an exception occurs during the execution of other code.

  - What is a rescue clause?
    - A rescue clause can be used to direct control flow to a piece of code if an exception is raised.

  - What are some examples of subclasses of StandardError?
    - ArgumentError: Raised when the arguments are wrong. Ex: wrong number of arguments, negative array size.
    - IndexError: Raised when the given index is invalid. Ex: index 4 out of array bounds: -2...2
    - IOError: Raised when an IO operation fails. Ex: No such file or directory - does/not/exist
    - NameError: Raised when a given name is invalid or undefined. Ex: undefined local variable or method `foo'
    - RangeError: Raised when a given numerical value is out of range. Ex: bignum too big to convert into `long'
    - TypeError: Raised when encountering an object that is not of the expected type. Ex: TypeError: no implicit conversion of String into Integer
    - ZeroDivisionError: Raised when attempting to divide an integer by 0.

  - How can we prevent raised exceptions from crashing our application?
    - We can use the 'rescue' keyword. Be as specific as possible to avoid unintentionally swallowing exceptions.

Stack Trace
  - What is a stack trace?
    - A stack trace is a list of the method calls that the application was evaluating when an Exception was thrown.
    - The debugging process involved going through the stack trace to see why there was an uncaught Exception.

Code smell
  - A characteristic in a program's code that may indicate a deeper problem.
    - Ex. Overly long methods, duplicated code, too many parameters passed to a method...

Pry
  What is Pry?
    - Pry is a Ruby REPL for debugging that you can inject into your program.
  How do we use Pry?
    - With Pry, your program freezes at execution when it hits 'binding.pry', and you can explore and manipulate data.

YAML
  - What is YAML?
    - YAML is a human-readable data serialization language, commonly used for config files, and a superset of JSON.
  - Is YAML a markup language?
    - Nope! YAML Ain't Markup Language! It's data oriented!
  - How do we express lists and maps in YAML?
    - Lists are denoted with [], and maps with {}; just like JSON!
  - What is Psych?
    - Psych is a Ruby gem designed to parse and emit YAML. It's a Ruby wrapper for the C library LibYAML.
      - With Psych we can #load, #parse, #read, and #dump YAML-- serialize and unserialize it.

What is the difference between a while loop and a do while loop?
  - While loops in Ruby execute while a condition is true.
  - Do while loops are similar to while, but evaluate at least once as the while condition is written at the end of the code.

Does a while loop with do/end count as a block?
  - Following the while keyword with do/end does not constitute a block.
  - Code constitutes a block if the {} or do/end immediately follows a method invocation.

Truthiness
  - What does 'truthiness' mean in the Ruby context?
    - Truthiness refers to the use of non-boolean objects (integer, string, array, etc.) in a boolean context.
      - A non-boolean value that counts as true is 'truthy', while a non-boolean that counts as false is 'falsey'.
    - Note: only 'true' and 'false' are booleans. nil, 0, [1,2,3], 'hello' are not booleans.
  - What counts as 'falsey' and 'truthy' in Ruby?
    - Only 'false' and 'nil' count as 'falsey' in ruby. Not 0, '', [], 'zero', etc. Everything else is truthy.
  - When do we need to consider truthiness in Ruby?
    - When using boolean operators: ! (not), && (and), and || (or).

** NOTES IN ANKI UP TO HERE **

What types of variables are available to us in Ruby?
  - Ruby has five types of variables: Constants, Global vars, Class vars, Instance vars, and Local vars. The last 4 are also our types of scoping in Ruby.
  - Constants: declared in CAPS, have global scope, never changed.
      Ex: MY_CONSTANT = 'I am available throughout your app.'
  - Global variables: declared with a $, have global scope, stay away.
      Ex: $var = 'I am also available throughout your app.'
  - Class variable: declared with @@, accessible by instances of class, initialized at class level.
      Ex: @@instances = 0
  - Instance variable: declared with @, available in current class instance, crosses some scopes.
      Ex: @var = 'I am available throughout the current instance of this class.'
  - Local variable: declared without @ or $ and not in uppercase. Obeys all scoping boundaries.
      Ex: var = 'I must be passed around to cross scope boundaries.'

Methods
  - How do we define methods in Ruby?
    - Method definitions consist of 'def' followed by the method name and optional parameters, the code body, and 'end'.
      - Convention dictates that method names are snake_cased.
      - Methods return the value of the last statement executed.

  - How do we invoke methods in Ruby?
    - Method invocation in Ruby looks like this: a.b(c) {d}
      - a: An expression whose value is the object on which the method is invoked
      - b: The name of the method being invoked (the only required piece of method invocation!)
      - c: Argument values to be passed to the method (optional)
      - d: Optional block of code with {} or do/end

    - Can we pass a block to a method in Ruby?
      - Yes! A block that is passed to a method is converted to a unnamed Proc object (anonymous function, lambda, etc.)
        - Ex. numbers = [1, 2, 5, 6, 9, 21]
              squares = numbers.map { |x| x * x }
        - do |x| \n ... \n end is equivalent to { |x| ... }

Closures
  - What is a `closure` in programming?
    - A closure is a function that can be stored as a variable, or referred to by a pointer, (a.k.a. a `First Class Function`)
    - Closures are `first class functions with an environment`.
      - The environment is a mapping to the variables that existed when the closure was created, and the closure will retain its access to those variables.

  - Does Ruby have first class functions?
    - No, Ruby does not have first class functions. Instead, it has closures in the form of blocks, procs, and lambdas.
      - Blocks are used for passing blocks of code to methods.
      - Procs and lambdas allow storing blocks of code in variables.
        - Ex. proc = Proc.new { |n| puts "#{n}!" }    \n    run_proc_with_random_number(proc)

  - What is `lexical scoping`?
    - In programming, scope refers to the `bindings` available at a specific part of the code.
      - A `binding` binds a name to memory reference, like a variable's name to its value.
    - Ruby uses a static scope, also sometimes called `lexical scope`: it's defined by where in the code the named variable or function is called.

  - What kinds of closures exist in Ruby?
    - Blocks, Procs, Lambdas(, sometimes methods). Procs and Lambdas (and methods) are objects!
    - Block: a chunk of code that can be passed to an object/method and is executed in the context of that object.
      - Ex: array.each do |x| ... end // array.each { }
    - Proc (procedure): a block is actually a proc, except it has been declared inline rather than saved to a variable. They're reusable!
    - Lambda: like a proc, but they enforce the number of arguments passed differently, and use "normal" returns.

Scoping
  - What is variable scope?
    - Variable scope defines where in a program a given variable is accessible.

  - How many types of scope does Ruby have?
    - Ruby has four main types of scope: local, global, instance, and class. These correspond to the types of variables in Ruby (minus Constants).
      - Local scope: Local to the code construct in which they are declared. True for methods, loops, etc.
        - Local variables begin with an underscore or a lowercase letter.
      - Global scope: Accessible anywhere in the program, regardless of where they're declared. Use (vs. a constant) is discouraged because they are mutable.
        - Global variables are prefixed with a dollar ($) sign.
      - Instance scope: Local to a specific instance of a class object. Changes don't affect other instances of the class.
        - Instance variables are prefixed by a single @ character.
      - Class scope: Global amongst all instances of a class. Only one variable value exists for all objects instantiated from said class.
        - Class variables are prefixed with 2 @ (@@) characters

  - What does `encapsulation` refer to in Ruby?
    - The partitioning of variable scope across a Ruby program.

  - How does `encapsulation` work?
    - Each method/module/class definition is known as a `scope gate` (def, class, and module keywords)

  - Can we avoid scope issues in method definitions?
    - Yes, by using closure definitions like define_method, proc, or lambda, you can access externally scoped local variables.

  - How does scoping interact with namespacing in Ruby?

  - How does block scoping work in Ruby?
    - Local scoped variables inside a block are not available outside of them.
    - Local scoped variables created outside a block are available within them.
    - Block parameters are always scoped local to the block, but we can override (re-point) variables outside the block.
    - Peer level scopes do not conflict.

What is variable shadowing in computer programming?
  - Variable shadowing refers to the reuse of a outer-scoped variable name in an inner scope, blocking access to the original outer scoped variable.
    - This is to be avoided and Rubocop checks for it. We can easily avoid this issue by using long/descriptive variable names-- a coding best practice.
      ex. n = 10
        [1, 2, 3].each do { |n| puts n } => "1" "2" "3"

What object passing strategies (evaluation strategies) are commonly used in computer programming?
  - Strict evaluation: the arguments to a function are always evaluated completely before the function is applied.
    - In the pass by reference strategy the function receives an implicit reference to a variable used as an argument, rather than a copy of its value. Therefore the function can modify the variable used as argument (mutate the caller).
    - In the pass by value strategy the argument expression is evaluated and the resulting value is bound to the corresponding variable in the function (copying the value into a new memory region).
    - Call by sharing (or pass by reference value, or pass by copy of reference): when an operation within the method mutates the caller, it will affect the original object.

reassignment
  - Assignment always binds the target variable on the left hand side of the =
    to the object referenced by the right hand side. The object originally
    referenced by the target variable is never modified.
  - Assignment operators are also non-mutating: *=, +=, -=, %=

Mutation
  - indexed assignment (is it mutating? no.)
  - concatenation (is it mutating? yes)
  - re/assignment (is it mutating?)
  - setters (are they mutating? yes)
  - setters

Why might we use a double bang (!!) operator in Ruby?
  - Double bangs are used to convert objects to their boolean value.
  - The first bang returns the opposite boolean value, and the second inverts back to match the truthiness of the caller.

What are some important string methods to know in Ruby?
  - String#count | String#delete
  - https://www.rubyguides.com/2018/01/ruby-string-methods/

What is abstraction?
  - Abstraction is the handling of complexity by hiding unnecessary details from the user, allowing the layering of complex logic.

What is an interface (in computing)?
  - An interface is a shared boundary across which two or more separate components of a computer system exchange information.

What is string interpolation?
  - String interpolation is the process of evaluating a string literal containing one or more placeholders, and yielding a result where they are replaced with their corresponding values.

What is a symbol in Ruby?
  - A symbol is the most basic object in Ruby-- it consists of a name and an internal ID, and looks like :this.
  - Symbols are immutable and more efficient than strings, and are well suited for use in hashes because of this.

What is an expression in Ruby?
  - Expressions are created from `operands` and `operators`. The operators indicate what to do with the operands.
  - Order of evaluation is determined by the precedence and associativity of the operators.
    - Precedence: The precedence of an operator specifies how 'tightly' an operator is bound to its operands, and affects the order of evaluation of an expression.
    - Associativity: The associativity of an operator specifies the order of evaluation when operators with the same precedence appear sequentially in an expression.
      - Associativity is either 'L' (left to right), 'R' (right to left), or 'N' (non-associative, requires parentheses to specify order.)
    - Arity: The arity of an operation is the number of arguments (or operands) that the function takes.
      - Unary/monadic (1), binary/dyadic (2), ternary ( x ? y : z ), etc.
  - Table: https://www.oreilly.com/library/view/the-ruby-programming/9780596516178/ch04s06.html#tab-operators

What is a method in Ruby?
  - A method in Ruby is a set of expressions that returns a value. The organization of code into subroutines to ease invocation-- sometimes referred to as a function.

What is the difference between parameters and arguments in Ruby?
  - A parameter represents a value that a method definition expects to be called when it is passed.
  - An argument is the value passed to a method parameter upon calling the method.
  - Parameters appear in method definitions, while arguments appear in method calls.

What does it mean to mutate the caller?
  - A calling object is mutated if the object is changed permanently as it is passed into a method as an argument.
  - In other words, if changes to an argument persist affect the object beyond the scope of the method, the method is mutating.
  - This works because Ruby method arguments are 'pass by reference value'.
  - “Hamlet was not written by Shakespeare; it was merely written by a man named Shakespeare.” - Philip K Dick, Valis
    -  A name and a person are different things. A variable and an object are different things.

What is our mental model for whether Ruby is Pass by Reference or Pass by Value?
  - Ruby appears to act like pass by value for immutable objects, and pass by reference for mutable objects.
  - Ruby is actually 'Pass by Reference Value'
  - “Hamlet was not written by Shakespeare; it was merely written by a man named Shakespeare.” - Philip K Dick, Valis
    -  A name and a person are different things. A variable and an object are different things.

What conditional branches do we have access to in Ruby?
  - If, Unless, If/Elsif/Else, Short-If (Ternary Operator), and Case/When.
  - Conditional branches in Ruby are considered expressions because they evaluate to/return a value.

What is the Ternary Operator in Ruby? Provide an example.
  - The ternary operator in Ruby is used to return a value based on the result of a binary condition.
    - Its arity is 3 because it takes a binary condition, and then a valueIfTrue and a valueIfFalse (3 arguments).

  - ternary_result = binaryCondition ? valueReturnedIfTrue : valueReturnedIfFalse;

What are the component steps of the PEDAC process taught by Launch School?
  - P: Understand the problem-- analyze the question and construct a mental model of what is being requested. Understand implicit requirements and ask clarifying questions.
  - E: Examples/Test Cases-- validate our understanding of the problem. Construct cases that should pass and others that should fail-- consider extremes/outliers.
  - D: Data Structure-- what is the data structure of the input? How can we best re-fit it to our desired output structure?
  - A: Algorithm-- write out the steps you will follow to get from your input to your output in PSEUDOCODE so eventual coding is easier.
  - C: Code-- Convert your pseudocode algorithm into proper syntax and execute. Ensure that all of your examples / test cases run correctly.

What is the Two-Layer Problem?
  - Learning to solve problems while simultaneously memorizing the syntax of a particular language.
  - We need instead to simplify so we're not fighting a multi-front battle.

Why use PEDAC?
    - Avoiding "hack and slash" coding
        - Often leads to missed requirements, unforeseen edge cases, hard to
          understand code, and code that's difficult to maintain.

How can we get around the Two-Layer Problem?
    - By using PEDAC.
