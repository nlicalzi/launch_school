Source: https://launchschool.com/lessons/de05b300/assignments/f9bd863d

Revisiting previous work: RB101/Lesson_2/Debugging
https://launchschool.com/lessons/a0f3cd44/assignments/e742d62a

# Temperament
  - The key to debugging is having a patient and logical temperament.

# Reading Error Messages
  - *Stack Trace*: every language/library has a certain pattern to theirs.

# Steps to Debugging
  1. Reproduce the Error
  2. Determine the Boundaries of the Error
  3. Trace the Code (or, 'Trapping the Error')
  4. Understand the Problem Well
  5. Implement a Fix (fix one problem at a time!)
  6. Test the Fix (add additional automated tests now)

# Techniques for Debugging
  1. Line by line
  2. Rubber Duck Debugging
  3. Walking Away
  4. Using Pry
  5. Using a Debugger

# Debugging with Pry (Outline)
  1. What is debugging?
  2. Debugging steps
  3. Debugging tools / pry
  4. What is pry?
  5. Using pry
  6. Invoking pry at runtime
  7. Accessing variables and scope
  8. Debugging with pry
  9. Stepping through code with pry-byebug

## What is debugging?
  - Bugs are human errors in code.
  - Debugging is the process of identifying and fixing those errors.

## How do we debug code?
  1. Identify the problem
    - track down the line of code causing the problem
  2. Understand the problem
  3. Implement a solution

## Types of error
  - Syntax errors (generally stops your code from functioning)
  - Logical errors (code generally runs, but w/ unexpected results)

## What is pry?
  - Pry is a Ruby gem ('gem install pry')
  - Pry is a REPL: "read-evaluate-print loop"
  - insert 'binding.pry', "require 'pry'" at the beginning of program

## Using pry
  - pry treats your code/session as a directory
    - changing scope with 'cd'
    - learn about context with 'ls'
    - call methods directly within context
    - access documentation with 'show-doc'

## Invoking pry at runtime
  - Using 'binding.pry'
    - A 'binding' is something that contains references to any variables that
      were in scope at the point where it was created.
    - 'pry' interrupts program execution & pries open the binding for exploration
    - 'whereami' shows you your context (integer arg controls context line count)

## Stepping through and into code
  - 'pry-byebug' extends 'pry' with some additional commands
    - 'next'
    - 'step'
    - 'continue'

## Takeaways
  - Debugging is an important skill to learn and practice
  - Tools such as pry and pry-byebug make debugging easier
  - Using these tools also helps to learn more about code
  - These debugging concepts are not limited to Ruby
